<?php

namespace Inamika\BackEndBundle\Repository;
use Inamika\BackEndBundle\Entity\SinisterItem;
use Inamika\BackEndBundle\Entity\Product;
use Inamika\BackEndBundle\Entity\SinisterStatus;
use Inamika\BackEndBundle\Entity\Provider;

/**
 * SinisterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SinisterRepository extends \Doctrine\ORM\EntityRepository
{
    public function getAll(){
        return $this->createQueryBuilder('e')
        ->select('e')
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->orderBy("e.date","DESC");
    }

    public function getAllNotClosed(){
        $statusClosed=[
            SinisterStatus::DELIVERED,
            SinisterStatus::INVOICED,
            SinisterStatus::DISCHARDGED
        ];
        $em = $this->getEntityManager();
        $sinistersNotClosed=$this->getAll()
        ->andWhere('e.status NOT IN (:statusClosed)')
        ->setParameter('statusClosed', $statusClosed)
        ->getQuery()->getResult();
        foreach($sinistersNotClosed as $sinister){
            $sinister->setDays((int)$sinister->getDate()->diff(new \DateTime())->format('%a'));
            $em->persist($sinister);
        }
        $em->flush();
    }


    public function search($query=null,$limit=0,$offset=0,$sort=null,$direction=null){
        if($limit>100) $limit=100;
        if($limit==0) $limit=30;
        $qb= $this->getAll()
        ->setFirstResult($offset)
        ->join('e.customer','customer')
        ->setMaxResults($limit);
        if($sort){
            if(strpos($sort, ".") === false)
                $sort='e.'.$sort;
            $qb->orderBy($sort,$direction);
        }else{
            $qb->orderBy("e.createdAt","DESC");
            // $qb->orderBy('RAND('.$direction.')');
        }
        if($query){
            $words=explode(" ",$query);
            if(count($words)>1){
                foreach ($words as $key => $word) {
                    $queryString=array();
                    $queryString[]="CONCAT(customer.name,customer.email,e.number) LIKE :word".$key;
                    $qb->setParameter('word'.$key,"%".$word."%");
                    $qb->andWhere(join(' AND ',$queryString));
                }
            }else{
                $qb->andWhere("CONCAT(customer.name,customer.email,e.number)  LIKE :query")->setParameter('query',"%".$query."%");
            }
        }
        return $qb;
    }

    public function searchTotal($query=null,$limit=0,$offset=0){
        $resultTotal=$this->search($query,$limit=0,$offset=0)
        ->setFirstResult(null)
        ->select('COUNT(e.id) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }
   
    public function total(){
        $resultTotal=$this->search()
        ->setFirstResult(null)
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->select('COUNT(e.id) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }
    
    public function amount(){
        $resultTotal=$this->search()
        ->setFirstResult(null)
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->select('SUM(e.amount) as total')
        ->setMaxResults(1)
        ->getQuery()
        ->getOneOrNullResult();
        return (int)$resultTotal['total'];
    }


    public function getUniqueNotDeleted(array $parameters){
        return $this->createQueryBuilder('e')
        ->select('e')
        ->where('e.isDelete = :isDelete')
        ->setParameter('isDelete',false)
        ->andWhere('e.number= :number')
        ->setParameter('number',$parameters['number'])
        ->setMaxResults(1)->getQuery()->getResult();
    }

    public function addProduct($sinister,$productList){
        $em = $this->getEntityManager();
        foreach($productList as $item){
            $product=$em->getRepository(Product::class)->find($item["id"]);
            $sinisterItem = new SinisterItem();
            $sinisterItem->setSinister($sinister);
            $sinisterItem->setProduct($product);
            $sinisterItem->setPrice($item["price"]);
            $sinisterItem->setDescription($product->getName());
            $sinisterItem->setSku($product->getSku());
            $sinisterItem->setAmount($item["amount"]);
            $sinisterItem->setSubtotal($item["amount"]*$item["price"]);
            $sinisterItem->setProvider($em->getRepository(Provider::class)->find($item["provider"]));
            $sinisterItem->setCost($item["cost"]);
            $sinisterItem->setBill(@$item["bill_number"]);
            $sinisterItem->setDepartureDate(@$item["departureDate"]);
            $sinisterItem->setArrivalDate(@$item["arrivalDate"]);
            $sinisterItem->setTransport(@$item["transport"]);
            $em->persist($sinisterItem);
        }
        $em->flush();
    }

    public function addProductByOrder($cart){
        $em = $this->getEntityManager();
        $date=new \DateTime();
        foreach($cart->getItems() as $item){
            $sinisterItem = new SinisterItem();
            $sinisterItem->setSinister($cart->getCustomer()->getSinister());
            $sinisterItem->setProduct($item->getProduct());
            $sinisterItem->setPrice($item->getProduct()->getPrice());
            $sinisterItem->setDescription($item->getProduct()->getName());
            $sinisterItem->setSku($item->getProduct()->getSku());
            $sinisterItem->setAmount($item->getAmount());
            $sinisterItem->setSubtotal($item->getTotal());
            $sinisterItem->setProvider($item->getProduct()->getProvider());
            $sinisterItem->setCost($item->getProduct()->getCost());
            $sinisterItem->setBill(null);
            $sinisterItem->setDepartureDate($date->format('d/m/Y'));
            $sinisterItem->setArrivalDate($date->format('d/m/Y'));
            $sinisterItem->setTransport(null);
            $em->persist($sinisterItem);
        }
        $em->flush();
    }
}
